generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ---------- ENUMS ----------
 */
enum Role {
  PATIENT
  CAREGIVER
}

enum PermissionLevel {
  READ
  WRITE
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

/**
 * ---------- MODELS ----------
 */
model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  passwordHash String
  name         String?
  role         Role    @default(PATIENT)

  profile                PatientProfile?
  givenPermissions       Permission[]    @relation("CaregiverPermissions")
  caregivingAppointments Appointment[]   @relation("AppointmentCaregiver")
  authoredNotes          Note[]          @relation("NoteAuthor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientProfile {
  id     Int  @id @default(autoincrement())
  name  String?
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
  age    Int
  dateOfBirth      DateTime?
  gender           String?
  doctorName       String?
  doctorContact    String?

  appointments Appointment[]
  medications  Medication[]
  treatments   Treatment[]
  notes        Note[]
  permissions  Permission[]  @relation("PatientPermissions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id               Int             @id @default(autoincrement())
  patientProfile   PatientProfile  @relation("PatientPermissions", fields: [patientProfileId], references: [id])
  patientProfileId Int
  caregiver        User            @relation("CaregiverPermissions", fields: [caregiverId], references: [id])
  caregiverId      Int
  level            PermissionLevel @default(READ)

  grantedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([patientProfileId, caregiverId])
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patientProfile   PatientProfile    @relation(fields: [patientProfileId], references: [id])
  patientProfileId Int
  caregiver        User?             @relation("AppointmentCaregiver", fields: [caregiverId], references: [id])
  caregiverId      Int?
  title            String
  description      String?
  dateTime         DateTime
  location         String?
  status           AppointmentStatus @default(SCHEDULED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id               Int            @id @default(autoincrement())
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])
  patientProfileId Int
  author           User?          @relation("NoteAuthor", fields: [authorId], references: [id])
  authorId         Int?
  content          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id               Int            @id @default(autoincrement())
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])
  patientProfileId Int

  name      String
  dosage    String
  type      String // oral, liquid, …
  frequency String // daily, weekly, custom
  startDate DateTime // fecha de la dosis (se usará como nextDose)
  endDate   DateTime?
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Treatment {
  id               Int            @id @default(autoincrement())
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])
  patientProfileId Int

  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  progress    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
